//@import "compass/css3";

// Define your typography breakpoints
$breakpoints: (
    'large'  : ( max-width: 600px ),
    'medium' : ( max-width: 400px ),
    'small'  : ( max-width: 300px ),
);

// Rem font sizing with px fallback
// Inspired by https://css-tricks.com/snippets/css/less-mixin-for-rem-font-sizing/
@mixin type-size($sizeValue: 1.6, $lineHeight: $sizeValue) {
    font-size: ($sizeValue * 10) + px;
    font-size: ($sizeValue / 1.6) + rem;
    line-height: ($lineHeight * 10) + px;
    line-height: ($lineHeight / 1.6) + rem;
}

// Responsive type mixin 
// $rate is the ammount by which the size and line-height should 
// decrease (negative values) or increase (positive values) with each breakpoint
@mixin scale-type-linear($fontSize, $lineHeight, $rate) {
    $ratio: $lineHeight/$fontSize;

  // Return the initial font size and line-height
@include type-size($fontSize, $lineHeight);

  // Loop through every breakpoint and return font sizes and line-heights for each
@each $name, $breakpoint in $breakpoints {
    $newFontSize: $fontSize - $rate;
    @media only screen and #{inspect(map-get($breakpoints, $name))} {
        @include type-size($newFontSize, $newFontSize*$ratio)
    }
    // Increment our $rate
    $rate: $rate + $rate;
}
}

// Responsive Typography by Breakpoints Mixin
//
// $sizes is a variable argument that matches our $breakpoints map
@mixin responsive-type-breakpoints($fontSize, $lineHeight, $sizes...) {
    $ratio: $lineHeight/$fontSize;
    $i: 1;

  // Return the initial font size and line-height
    @include type-size($fontSize, $lineHeight);

  // Loop through the breakpoins in our map and return font sizes and line heights for each of them
    @each $name, $breakpoint in $breakpoints {
    // Only return values when the breakpoint ins't 0
    @if nth($sizes, $i) != 0 { 
        $newFontSize: nth($sizes, $i);
        @media only screen and #{inspect(map-get($breakpoints, $name))} {
            @include type-size($newFontSize, $newFontSize*$ratio)
        }
    }
        $i: $i + 1;
    }
}


// 
@mixin responsive-type-breakpoint($fontSize, $lineHeight, $breakpoint) {
    @if (#{inspect(map-get($breakpoints, $breakpoint))}) != 'null' {
        @media only screen and #{inspect(map-get($breakpoints, $breakpoint))} {
            @include type-size($fontSize, $lineHeight);
        }
    } @else {
    @media only screen and ($breakpoint) {
        @include type-size($fontSize, $lineHeight);
        }
    }
}

// p {
//   //@include scale-type-linear(3, 3.6, .2);
//     // template // responsive-type-breakpoint($fontSize, $lineHeight, $breakpoint)
//     @include responsive-type-breakpoints(2.2, 2.6, 2.1, 2, 1.8);
//   // @include responsive-type-breakpoints(3, 3.6, 2.4, 0, 1.6);
//   // @include responsive-type-breakpoint(3, 3.6, 'small');
// }


.headline {
    @include responsive-type-breakpoints(2.5, 3.2, 2.1, 2, 1.6);
}

p {
    @include responsive-type-breakpoints(2, 2.2, 1.8, 1.6, 1.4);
}